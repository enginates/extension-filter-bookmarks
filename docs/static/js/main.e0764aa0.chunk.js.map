{"version":3,"sources":["Configure.tsx","FilterBookmarks.tsx","Home.tsx","index.tsx"],"names":["dashboard","Configure","state","bg","button","clear","filters","label","saved","text","labelChange","e","target","value","_this","setState","window","tableau","extensions","settings","set","saveAsync","error","console","log","bgChange","color","buttonChange","textChange","clearChange","checked","getFilters","filterFetchPromises","dashboardfilters","worksheets","forEach","worksheet","push","getFiltersAsync","Promise","all","then","fetchResults","filtersForWorksheet","filter","constructSettings","submit","ui","closeDialog","skip","min","minValue","max","maxValue","data","snullOption","formattedValue","undefined","fieldName","startsWith","dataType","filterType","nullOption","worksheetName","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","appliedValues","Symbol","iterator","next","done","v","err","return","supdateType","length","isExcludeMode","updateType","_this2","this","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","f","constructRangeSetting","constructCategoricalSetting","JSON","stringify","setTimeout","_this3","initializeDialogAsync","dashboardContent","getAll","configured","react","className","xmlns","id","width","height","viewBox","x","y","fillRule","clipRule","fill","d","style","marginTop","tableau_ui_min","kind","onChange","onClick","disabled","flexGrow","type","backgroundColor","marginLeft","React","FilterBookmarks","applyFilters","clearFilters","parse","_loop","filterOptions","Date","find","ws","name","applyRangeFilterAsync","catch","applyFilterAsync","filterClearPromises","clearFilterAsync","popupUrl","concat","location","origin","process","displayDialogAsync","errorCode","ErrorCodes","DialogClosedByUser","message","initializeAsync","configure","addEventListener","TableauEventType","SettingsChanged","settingsEvent","updateSettings","newSettings","active","rgb","hex","result","exec","b","parseInt","g","r","hexToRgb","Math","floor","css","Home","href","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e0764aa0.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, Checkbox, TextField } from '@tableau/tableau-ui';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nlet dashboard: any;\r\n\r\ninterface State {\r\n    bg: string,\r\n    button: string,\r\n    clear: boolean,\r\n    filters: any,\r\n    label: string,\r\n    saved: boolean,\r\n    text: string,\r\n}\r\n\r\n// Container for all configurations\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        bg: '#000000',\r\n        button: '#000000',\r\n        clear: false,\r\n        filters: [],\r\n        label: 'Revert Filters',\r\n        saved: false,\r\n        text: '#000000',\r\n    };\r\n\r\n    // Handles change in label input\r\n    public labelChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const text: string = e.target.value;\r\n        this.setState({ label: text });\r\n        try {\r\n            window.tableau.extensions.settings.set('label', text);\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Handles change in color input\r\n    public bgChange = (color: any): void => {\r\n        this.setState({ bg: color.target.value });\r\n        window.tableau.extensions.settings.set('bg', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public buttonChange = (color: any): void => {\r\n        this.setState({ button: color.target.value });\r\n        window.tableau.extensions.settings.set('button', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public textChange = (color: any): void => {\r\n        this.setState({ text: color.target.value });\r\n        window.tableau.extensions.settings.set('text', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in ignoreSelection checkbox\r\n    public clearChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ clear: e.target.checked });\r\n        window.tableau.extensions.settings.set('clear', e.target.checked);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    };\r\n\r\n    // Get all filters from all worksheets in dashboard\r\n    public getFilters = (): void => {\r\n        console.log('getting filters')\r\n        const filterFetchPromises: any[] = [];\r\n        const dashboardfilters: any[] = [];\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            filterFetchPromises.push(worksheet.getFiltersAsync());\r\n        });\r\n        Promise.all(filterFetchPromises).then(fetchResults => {\r\n            fetchResults.forEach(filtersForWorksheet => {\r\n                filtersForWorksheet.forEach((filter: any) => {\r\n                    dashboardfilters.push(filter);\r\n                });\r\n            });\r\n            this.constructSettings(dashboardfilters);\r\n        });\r\n    }\r\n\r\n    // Settings for range filters\r\n    public constructRangeSetting(filter: any) {\r\n        let skip;\r\n        const min = filter.minValue.value;\r\n        const max = filter.maxValue.value;\r\n        const data = (typeof filter.maxValue.value === 'object' || typeof filter.minValue.value === 'object') ? 'date' : 'number';\r\n        const snullOption = (filter.maxValue.formattedValue === 'Null' && filter.minValue.formattedValue === 'Null') ? 'all-values' : '';\r\n        skip = (filter.minValue.value === undefined || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            dataType: data,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            max: (max === 0) ? .0000000000001 : max,\r\n            min: (min === 0) ? .0000000000001 : min,\r\n            nullOption: snullOption,\r\n            skip,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Settings for categoriacl filters\r\n    public constructCategoricalSetting(filter: any) {\r\n        let skip;\r\n        const values = [];\r\n        for (const v of filter.appliedValues) {\r\n            values.push(v.formattedValue)\r\n        }\r\n        const supdateType = (values.length === 0) ? 'all' : 'replace';\r\n        skip = (filter.fieldName === 'Measure Names' || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            appliedValues: values,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            isExcludeMode: filter.isExcludeMode,\r\n            skip,\r\n            updateType: supdateType,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Transforms filters into settings\r\n    public constructSettings(filters: any) {\r\n        const settings = [];\r\n        for (const f of filters) {\r\n            switch (f.filterType) {\r\n                case 'range':\r\n                    settings.push(this.constructRangeSetting(f));\r\n                    break;\r\n                case 'categorical':\r\n                    settings.push(this.constructCategoricalSetting(f));\r\n                    break;\r\n                default:\r\n                    continue;\r\n            }\r\n        }\r\n        window.tableau.extensions.settings.set('filters_set', 'true');\r\n        window.tableau.extensions.settings.set('filters', JSON.stringify(settings));\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            // Show/hide \"Settings saved!\"\r\n            this.setState({ saved: true });\r\n            setTimeout(() => {\r\n                this.setState({ saved: false });\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    // Saves settings and closes configure dialog with data source payload\r\n    public submit = (): void => {\r\n        const text = (this.state.label || 'Revert Filters');\r\n        window.tableau.extensions.settings.set('label', text);\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog('closed');\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            this.setState({\r\n                bg: settings.bg,\r\n                button: settings.button,\r\n                clear: settings.clear === 'true',\r\n                label: settings.label,\r\n                text: settings.text,\r\n            });\r\n            if (settings.configured !== 'true') {\r\n                this.getFilters();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Filter Bookmarks Configuration\r\n                            <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Set your dashboard filters they way you want to be able to revert to.</li>\r\n                                        <li>Open the configuration window and click \"Save Settings\".</li>\r\n                                    </ol>\r\n                                    <p>Optional: Customize your buttons label and colors.</p>\r\n                                    <p>If you simply want to clear all filters with this button, turn on that setting under \"Options\".</p>\r\n                                    <p>Note: You can add as many instances of this extension as you like!</p>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='title' style={{ marginTop: '18px' }}>Button Settings</div>\r\n                            <div className='section'>\r\n                                <TextField className='label-text-field' kind='line' label='Label' onChange={this.labelChange} value={this.state.label} />\r\n                                {this.state.clear ?\r\n                                    <p>Currently clearing all filters.</p> : <p>Click <b>Save Settings</b> to save current filters.</p>}\r\n                                <div className='set'>\r\n                                    <Button onClick={this.getFilters} disabled={this.state.clear}>Save Settings</Button>\r\n                                    <span className={this.state.saved ? 'saved show' : 'saved'}>Settings saved!</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className='title'>Options</div>\r\n                            <div className='section'>\r\n                                <Checkbox checked={this.state.clear} onChange={this.clearChange} style={{ flexGrow: 1 }}>Ignore settings and just clear all filters</Checkbox>\r\n                            </div>\r\n                            <div className='title'>Formatting</div>\r\n                            <div className='section'>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Background Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Button Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.button} onChange={this.buttonChange} style={{ backgroundColor: this.state.button }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Button Text Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.text} onChange={this.textChange} style={{ backgroundColor: this.state.text }} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button kind='filledGreen' onClick={this.submit} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;","import * as React from 'react';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nlet dashboard: any;\r\n\r\ninterface State {\r\n    bg: string,\r\n    button: string,\r\n    clear: boolean,\r\n    configured: boolean,\r\n    filters: any[],\r\n    label: string,\r\n    text: string,\r\n}\r\n\r\nfunction hexToRgb(hex: string) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        b: parseInt(result[3], 16),\r\n        g: parseInt(result[2], 16),\r\n        r: parseInt(result[1], 16),\r\n    } : null;\r\n}\r\n\r\nclass FilterBookmarks extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        bg: '#ffffff',\r\n        button: '#2DCC97',\r\n        clear: false,\r\n        configured: false,\r\n        filters: [],\r\n        label: 'Revert Filters',\r\n        text: '#ffffff',\r\n    };\r\n\r\n    // Clears all filters on a dashboard\r\n    public clearFilters() {\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            worksheet.getFiltersAsync().then((filtersForWorksheet: any) => {\r\n                const filterClearPromises: any[] = [];\r\n                filtersForWorksheet.forEach((filter: any) => {\r\n                    filterClearPromises.push(worksheet.clearFilterAsync(filter.fieldName));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Apply the filters set in settings\r\n    public applyFilters = (): void => {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (settings.clear === 'true') {\r\n            this.clearFilters();\r\n        } else {\r\n            const filters = JSON.parse(settings.filters);\r\n            for (const filter of filters) {\r\n                if (filter.skip === false) {\r\n                    switch (filter.filterType) {\r\n                        case 'range':\r\n                            let filterOptions = {};\r\n                            if (filter.nullOption === 'all-values') {\r\n                                filterOptions = { nullOption: filter.nullOption };\r\n                            } else if (filter.dataType === 'date') {\r\n                                filterOptions = { min: new Date(filter.min), max: new Date(filter.max) };\r\n                            } else {\r\n                                filterOptions = { min: filter.min, max: filter.max };\r\n                            }\r\n                            dashboard.worksheets.find((ws: any) => ws.name === filter.worksheetName).applyRangeFilterAsync(filter.fieldName, filterOptions).catch(console.log);\r\n                            break;\r\n                        case 'categorical':\r\n                            dashboard.worksheets.find((ws: any) => ws.name === filter.worksheetName).applyFilterAsync(filter.fieldName, filter.appliedValues, filter.updateType, { isExcludeMode: filter.isExcludeMode }).catch(console.log);\r\n                            break;\r\n                        default:\r\n                            continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Pops open the configure page\r\n    public configure() {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 470, width: 295 }).catch((error: any) => {\r\n            switch (error.errorCode) {\r\n                case window.tableau.ErrorCodes.DialogClosedByUser:\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update buttons from configuration settings\r\n    public updateSettings(settings: any) {\r\n        this.setState({\r\n            bg: settings.bg,\r\n            button: settings.button,\r\n            configured: settings.configured === 'true',\r\n            filters: JSON.parse(settings.filters),\r\n            label: settings.label,\r\n            text: settings.text,\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            window.tableau.extensions.settings.addEventListener(window.tableau.TableauEventType.SettingsChanged, (settingsEvent: any) => {\r\n                this.updateSettings(settingsEvent.newSettings)\r\n            });\r\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.updateSettings(window.tableau.extensions.settings.getAll())\r\n            } else {\r\n                window.tableau.extensions.settings.set('bg', this.state.bg);\r\n                window.tableau.extensions.settings.set('button', this.state.button);\r\n                window.tableau.extensions.settings.set('clear', this.state.clear);\r\n                window.tableau.extensions.settings.set('label', this.state.label);\r\n                window.tableau.extensions.settings.set('text', this.state.text);\r\n                window.tableau.extensions.settings.saveAsync().then(() => {\r\n                    this.configure();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let active = '';\r\n        let color = '';\r\n        const rgb = hexToRgb(this.state.button);\r\n        if (rgb) {\r\n            active = `rgb(${Math.floor(rgb.r)}, ${Math.floor(rgb.g)}, ${Math.floor(rgb.b)})`;\r\n            color = `rgba(${Math.floor(rgb.r)}, ${Math.floor(rgb.g)}, ${Math.floor(rgb.b)}, .8)`;\r\n        }\r\n        const css = `\r\n            button.button:active {\r\n                background-color: ${active} !important;\r\n            }\r\n        `\r\n        return (\r\n            <div className='outer' style={{ backgroundColor: this.state.bg }}>\r\n                <div className='inner'>\r\n                    <style>{css}</style>\r\n                    <button className='button' onClick={this.applyFilters} style={{ backgroundColor: color, color: this.state.text }}>{this.state.label}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBookmarks;","import * as React from 'react';\r\nimport './home.css';\r\n\r\nclass Home extends React.Component<any, any> {\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className='icontainer'>\r\n\t\t\t\t\t<div className='box'>\r\n\t\t\t\t\t\t<div className='left'>\r\n\t\t\t\t\t\t\t<h1 className='iheader'>Filter Bookmarks</h1>\r\n\t\t\t\t\t\t\t<span className='tagline'>Instantly revert your dashboards to predefined filter settings.</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='right'>\r\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\r\n\t\t\t\t\t\t\t<p>This extension enables you to add a button directly into your dashboard that resets to certain filter settings. Great for embedded dashboards that do not have the toolbar showing or for a more intuitive interface.</p>\r\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\r\n\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t<li>Set your dashboard filters they way you want to be able to revert to.</li>\r\n\t\t\t\t\t\t\t\t<li>Open the configuration window and click \"Save Settings\".</li>\r\n\t\t\t\t\t\t\t\t<li>Optional: Customize your buttons label and colors.</li>\r\n\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\r\n\t\t\t\t\t\t\t<div className='gh'>\r\n\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\r\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-filter-bookmarks'>View on GitHub</a> */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport FilterBookmarks from './FilterBookmarks';\nimport Home from './Home';\nimport './style.css';\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n      <Route path='/' exact={true} component={Home} />\n      <Route path='/bookmarks' component={FilterBookmarks} />\n      <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n      return (\n          <HashRouter>\n              <PrimaryLayout />\n          </HashRouter>\n      )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}