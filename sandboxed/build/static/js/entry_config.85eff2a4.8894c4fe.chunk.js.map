{"version":3,"sources":["Configure.tsx","entry_config.tsx","index.tsx"],"names":["Configure","state","bg","button","clear","filters","image","name","ext","data","label","saved","style","text","labelChange","e","target","value","_this","setState","window","tableau","extensions","settings","set","saveAsync","error","console","log","styleChange","setImage","file","files","exec","slice","length","includes","type","reader","FileReader","addEventListener","result","substring","search","JSON","stringify","readAsDataURL","alert","bgChange","color","buttonChange","textChange","clearChange","checked","getFilters","filterFetchPromises","dashboardfilters","dashboardContent","dashboard","worksheets","forEach","worksheet","push","getFiltersAsync","Promise","all","then","fetchResults","filtersForWorksheet","filter","constructSettings","submit","ui","closeDialog","skip","min","minValue","max","maxValue","snullOption","formattedValue","undefined","fieldName","startsWith","dataType","filterType","nullOption","worksheetName","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","appliedValues","Symbol","iterator","next","done","v","err","return","supdateType","isExcludeMode","updateType","_this2","this","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","f","constructRangeSetting","constructCategoricalSetting","setTimeout","_this3","initializeDialogAsync","getAll","parse","configured","react","className","xmlns","id","width","height","viewBox","x","y","fillRule","clipRule","fill","d","marginTop","tableau_ui_min","kind","onChange","onSelect","display","accept","htmlFor","onClick","disabled","flexGrow","backgroundColor","marginLeft","React","ReactDOM","src_Configure","document","getElementById","__webpack_require__","r","__webpack_exports__"],"mappings":"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","file":"static/js/entry_config.85eff2a4.8894c4fe.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, Checkbox, TextField, DropdownSelect } from '@tableau/tableau-ui';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\ninterface Image {\r\n\tname: string;\r\n    ext: string;\r\n    data: string;\r\n}\r\n\r\ninterface State {\r\n    bg: string,\r\n    button: string,\r\n    clear: boolean,\r\n    filters: any,\r\n    image: Image,\r\n    label: string,\r\n    saved: boolean,\r\n    style: string,\r\n    text: string,\r\n}\r\n\r\n// Container for all configurations\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        bg: '#000000',\r\n        button: '#000000',\r\n        clear: false,\r\n        filters: [],\r\n        image: {name: '', ext:'', data: ''},\r\n        label: 'Revert Filters',\r\n        saved: false,\r\n        style: 'text',\r\n        text: '#000000',\r\n    };\r\n\r\n    // Handles change in label input\r\n    public labelChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const text: string = e.target.value;\r\n        this.setState({ label: text });\r\n        try {\r\n            window.tableau.extensions.settings.set('label', text);\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Handles change in style input\r\n    public styleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        const style: string = e.target.value;\r\n        this.setState({ style });\r\n        try {\r\n            window.tableau.extensions.settings.set('style', style);\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Display the selected image and save file data\r\n    public setImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        let file;\r\n        // Get the image from the file input\r\n        if (e.target.files) {\r\n            file = e.target.files[0];\r\n        }\r\n\r\n        if (file) {\r\n            // Regex to get file extension and name\r\n            const re = /(?:\\.([^.]+))?$/;\r\n            const ext = re.exec(file.name)![1];\r\n            const name = file.name.slice(0, -ext.length);\r\n\r\n            // Check if file is an image\r\n            const accepted = ['image/gif', 'image/jpeg', 'image/png'];\r\n            const valid = file && accepted.includes(file.type);\r\n            if (valid) {\r\n                // Create a new FileReader so we can read the contents of the image\r\n                const reader = new FileReader();\r\n\r\n                // Update the image data\r\n                reader.addEventListener('load', () => {\r\n                    if (reader.result) {\r\n                        const data = (reader.result as string).substring((reader.result as string).search(',') + 1);\r\n                        const image = {\r\n                            name,\r\n                            ext,\r\n                            data,\r\n                        };\r\n                        this.setState({ image });\r\n                        window.tableau.extensions.settings.set('image', JSON.stringify(image));\r\n                        window.tableau.extensions.settings.saveAsync();\r\n                    }\r\n                }, false);\r\n\r\n                // If an image was selected load the file into the FileReader\r\n                if (file) {\r\n                    reader.readAsDataURL(file);\r\n                }\r\n            } else {\r\n                alert('The selected file is not a .gif, .jpg, .jpeg, or .png');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handles change in color input\r\n    public bgChange = (color: any): void => {\r\n        this.setState({ bg: color.target.value });\r\n        window.tableau.extensions.settings.set('bg', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public buttonChange = (color: any): void => {\r\n        this.setState({ button: color.target.value });\r\n        window.tableau.extensions.settings.set('button', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public textChange = (color: any): void => {\r\n        this.setState({ text: color.target.value });\r\n        window.tableau.extensions.settings.set('text', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in ignoreSelection checkbox\r\n    public clearChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ clear: e.target.checked });\r\n        window.tableau.extensions.settings.set('clear', e.target.checked);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    };\r\n\r\n    // Get all filters from all worksheets in dashboard\r\n    public getFilters = (): void => {\r\n        console.log('getting filters')\r\n        const filterFetchPromises: any[] = [];\r\n        const dashboardfilters: any[] = [];\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            filterFetchPromises.push(worksheet.getFiltersAsync());\r\n        });\r\n        Promise.all(filterFetchPromises).then(fetchResults => {\r\n            fetchResults.forEach(filtersForWorksheet => {\r\n                filtersForWorksheet.forEach((filter: any) => {\r\n                    dashboardfilters.push(filter);\r\n                });\r\n            });\r\n            this.constructSettings(dashboardfilters);\r\n        });\r\n    }\r\n\r\n    // Settings for range filters\r\n    public constructRangeSetting(filter: any) {\r\n        let skip;\r\n        const min = filter.minValue.value;\r\n        const max = filter.maxValue.value;\r\n        const data = (typeof filter.maxValue.value === 'object' || typeof filter.minValue.value === 'object') ? 'date' : 'number';\r\n        const snullOption = (filter.maxValue.formattedValue === 'Null' && filter.minValue.formattedValue === 'Null') ? 'all-values' : '';\r\n        skip = (filter.minValue.value === undefined || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            dataType: data,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            max: (max === 0) ? .0000000000001 : max,\r\n            min: (min === 0) ? .0000000000001 : min,\r\n            nullOption: snullOption,\r\n            skip,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Settings for categoriacl filters\r\n    public constructCategoricalSetting(filter: any) {\r\n        let skip;\r\n        const values = [];\r\n        for (const v of filter.appliedValues) {\r\n            values.push(v.formattedValue)\r\n        }\r\n        const supdateType = (values.length === 0) ? 'all' : 'replace';\r\n        skip = (filter.fieldName === 'Measure Names' || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            appliedValues: values,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            isExcludeMode: filter.isExcludeMode,\r\n            skip,\r\n            updateType: supdateType,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Transforms filters into settings\r\n    public constructSettings(filters: any) {\r\n        const settings = [];\r\n        for (const f of filters) {\r\n            switch (f.filterType) {\r\n                case 'range':\r\n                    settings.push(this.constructRangeSetting(f));\r\n                    break;\r\n                case 'categorical':\r\n                    settings.push(this.constructCategoricalSetting(f));\r\n                    break;\r\n                default:\r\n                    continue;\r\n            }\r\n        }\r\n        window.tableau.extensions.settings.set('filters_set', 'true');\r\n        window.tableau.extensions.settings.set('filters', JSON.stringify(settings));\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            // Show/hide \"Settings saved!\"\r\n            this.setState({ saved: true });\r\n            setTimeout(() => {\r\n                this.setState({ saved: false });\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    // Saves settings and closes configure dialog with data source payload\r\n    public submit = (): void => {\r\n        const text = (this.state.label || 'Revert Filters');\r\n        window.tableau.extensions.settings.set('label', text);\r\n        window.tableau.extensions.settings.set('style', this.state.style);\r\n        window.tableau.extensions.settings.set('image', JSON.stringify(this.state.image));\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog('closed');\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            let image = settings.image ? JSON.parse(settings.image) : this.state.image;\r\n            this.setState({\r\n                bg: settings.bg,\r\n                button: settings.button,\r\n                clear: settings.clear === 'true',\r\n                label: settings.label,\r\n                style: settings.style || 'text',\r\n                image,\r\n                text: settings.text,\r\n            });\r\n            if (settings.configured !== 'true') {\r\n                this.getFilters();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Filter Bookmarks Configuration\r\n                            <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Set your dashboard filters they way you want to be able to revert to.</li>\r\n                                        <li>Open the configuration window and click \"Save Settings\".</li>\r\n                                    </ol>\r\n                                    <p>Optional: Customize your buttons label and colors.</p>\r\n                                    <p>If you simply want to clear all filters with this button, turn on that setting under \"Options\".</p>\r\n                                    <p>Note: You can add as many instances of this extension as you like!</p>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='title' style={{ marginTop: '18px' }}>Button Settings</div>\r\n                            <div className='section'>\r\n                                <label className=\"label\">Button Style</label>\r\n                                <DropdownSelect className='dropdown-select' kind='line' onChange={this.styleChange} onSelect={this.styleChange} value={this.state.style}>\r\n                                    <option value=\"image\">Image button</option><option value=\"text\">Text button</option>\r\n                                </DropdownSelect>\r\n\r\n                                <TextField className='label-text-field' style={{display: this.state.style === 'text' ? \"inline-flex\" : \"none\"}} kind='line' label='Label' onChange={this.labelChange} value={this.state.label} />\r\n\r\n                                <div className='inputBox' style={{display: this.state.style === 'image' ? \"inline-flex\" : \"none\"}}>\r\n                                    <span className='imgName ellipsis'>{this.state.image.name !== '' ? this.state.image.name : 'Choose an image...'}</span>\r\n\r\n                                    <span className='imgExt'>{this.state.image.ext !== '' ? this.state.image.ext : ''}</span>\r\n\r\n                                    <input className='imgInput' type='file' accept='.gif,.jpg,.jpeg,.png' id='imgInput' onChange={this.setImage} />\r\n\r\n                                    <label className='imgLabel' htmlFor='imgInput'>Choose</label>\r\n                                </div>\r\n\r\n                                {this.state.clear ?\r\n                                    <p>Currently clearing all filters.</p> : <p>Click <b>Save Settings</b> to save current filters.</p>}\r\n\r\n                                <div className='set'>\r\n                                    <Button onClick={this.getFilters} disabled={this.state.clear}>Save Settings</Button>\r\n                                    <span className={this.state.saved ? 'saved show' : 'saved'}>Settings saved!</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className='title'>Options</div>\r\n                            <div className='section'>\r\n                                <Checkbox checked={this.state.clear} onChange={this.clearChange} style={{ flexGrow: 1 }}>Ignore settings and just clear all filters</Checkbox>\r\n                            </div>\r\n                            <div className='title'>Formatting</div>\r\n                            <div className='section'>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Background Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Text Button Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.button} onChange={this.buttonChange} style={{ backgroundColor: this.state.button }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Text Button Text Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.text} onChange={this.textChange} style={{ backgroundColor: this.state.text }} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button kind='filledGreen' onClick={this.submit} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport Configure from './Configure';\r\nimport './style.css';\r\n\r\nReactDOM.render(<Configure />, document.getElementById('container'));\r\n","export { }\n"],"sourceRoot":""}