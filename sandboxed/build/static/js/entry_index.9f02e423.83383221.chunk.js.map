{"version":3,"sources":["FilterBookmarks.tsx","entry_index.tsx","index.tsx"],"names":["defaultImage","name","ext","data","FilterBookmarks","state","bg","button","clear","configured","filters","image","label","style","text","applyFilters","dashboard","window","tableau","extensions","dashboardContent","settings","getAll","_this","clearFilters","JSON","parse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","filter","value","skip","filterType","filterOptions","nullOption","dataType","min","Date","max","worksheets","find","ws","worksheetName","applyRangeFilterAsync","fieldName","catch","console","log","applyFilterAsync","appliedValues","updateType","isExcludeMode","_iterator","Symbol","iterator","next","done","err","return","forEach","worksheet","getFiltersAsync","then","filtersForWorksheet","filterClearPromises","push","clearFilterAsync","popupUrl","concat","location","origin","process","ui","displayDialogAsync","height","width","error","errorCode","ErrorCodes","DialogClosedByUser","message","this","setState","_this2","initializeAsync","configure","addEventListener","TableauEventType","SettingsChanged","settingsEvent","updateSettings","newSettings","set","stringify","saveAsync","active","color","rgb","hex","result","exec","b","parseInt","g","r","hexToRgb","Math","floor","css","textButton","react","className","onClick","backgroundColor","imageButton","src","cursor","maxWidth","objectFit","alt","React","ReactDOM","src_FilterBookmarks","document","getElementById","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"static/js/entry_index.9f02e423.83383221.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\ninterface Image {\r\n\tname: string;\r\n    ext: string;\r\n    data: string;\r\n}\r\n\r\nconst defaultImage = {\r\n    name: 'default',\r\n    ext:'.png',\r\n    data: 'iVBORw0KGgoAAAANSUhEUgAAAD4AAAAaCAYAAADv/O9kAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH5AMbFhQgjNJxJQAAAPFJREFUWIXtlC8LwlAUR3/+QWEDwTAwiYgIWzKsrwkW04LNYDLbBe1+BIPtZYtV+4JpYYgMk7Bg2kBBNK1NTd47eO98gXMP791bWIT7l59EkAlLM1CULRoA/CRCkXsILlS4bKhw2VDh/8fGqutgQCf8Cu2LlwyMTReibZNqs+D56tUWhOli3eyw6AHmHdf1HoQ5xLxO787BcavAargQZh9TQmsOwlNqcAh3v0xm+sgD/nWL5Y3Wyhoex0dMLicWN0/4PcTo7LGoU2jDnxE2wQE7Umk2hOEeZgGd7Rc5uuq0qHDZUOGyIW+4pRncM5BjaQbeyHkrIkfBCTEAAAAASUVORK5CYII='\r\n}\r\n\r\ninterface State {\r\n    bg: string,\r\n    button: string,\r\n    clear: boolean,\r\n    configured: boolean,\r\n    filters: any[],\r\n    image: Image,\r\n    label: string,\r\n    style: string,\r\n    text: string,\r\n}\r\n\r\nfunction hexToRgb(hex: string) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        b: parseInt(result[3], 16),\r\n        g: parseInt(result[2], 16),\r\n        r: parseInt(result[1], 16),\r\n    } : null;\r\n}\r\n\r\nclass FilterBookmarks extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        bg: '#ffffff',\r\n        button: '#2DCC97',\r\n        clear: false,\r\n        configured: false,\r\n        filters: [],\r\n        image: {name: '', ext:'', data: ''},\r\n        label: 'Revert Filters',\r\n        style: 'text',\r\n        text: '#ffffff',\r\n    };\r\n\r\n    // Clears all filters on a dashboard\r\n    public clearFilters() {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            worksheet.getFiltersAsync().then((filtersForWorksheet: any) => {\r\n                const filterClearPromises: any[] = [];\r\n                filtersForWorksheet.forEach((filter: any) => {\r\n                    filterClearPromises.push(worksheet.clearFilterAsync(filter.fieldName));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // Apply the filters set in settings\r\n    public applyFilters = (): void => {\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (settings.clear === 'true') {\r\n            this.clearFilters();\r\n        } else {\r\n            const filters = JSON.parse(settings.filters);\r\n            for (const filter of filters) {\r\n                if (filter.skip === false) {\r\n                    switch (filter.filterType) {\r\n                        case 'range':\r\n                            let filterOptions = {};\r\n                            if (filter.nullOption === 'all-values') {\r\n                                filterOptions = { nullOption: filter.nullOption };\r\n                            } else if (filter.dataType === 'date') {\r\n                                filterOptions = { min: new Date(filter.min), max: new Date(filter.max) };\r\n                            } else {\r\n                                filterOptions = { min: filter.min, max: filter.max };\r\n                            }\r\n                            dashboard.worksheets.find((ws: any) => ws.name === filter.worksheetName).applyRangeFilterAsync(filter.fieldName, filterOptions).catch(console.log);\r\n                            break;\r\n                        case 'categorical':\r\n                            dashboard.worksheets.find((ws: any) => ws.name === filter.worksheetName).applyFilterAsync(filter.fieldName, filter.appliedValues, filter.updateType, { isExcludeMode: filter.isExcludeMode }).catch(console.log);\r\n                            break;\r\n                        default:\r\n                            continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Pops open the configure page\r\n    public configure() {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 520, width: 295 }).catch((error: any) => {\r\n            switch (error.errorCode) {\r\n                case window.tableau.ErrorCodes.DialogClosedByUser:\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Update buttons from configuration settings\r\n    public updateSettings(settings: any) {\r\n        this.setState({\r\n            bg: settings.bg,\r\n            button: settings.button,\r\n            configured: settings.configured === 'true',\r\n            filters: JSON.parse(settings.filters),\r\n            label: settings.label,\r\n            style: settings.style || 'text',\r\n            image: JSON.parse(settings.image || defaultImage),\r\n            text: settings.text,\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            window.tableau.extensions.settings.addEventListener(window.tableau.TableauEventType.SettingsChanged, (settingsEvent: any) => {\r\n                this.updateSettings(settingsEvent.newSettings)\r\n            });\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.updateSettings(window.tableau.extensions.settings.getAll())\r\n            } else {\r\n                window.tableau.extensions.settings.set('bg', this.state.bg);\r\n                window.tableau.extensions.settings.set('button', this.state.button);\r\n                window.tableau.extensions.settings.set('clear', this.state.clear);\r\n                window.tableau.extensions.settings.set('label', this.state.label);\r\n                window.tableau.extensions.settings.set('image', JSON.stringify(this.state.image));\r\n                window.tableau.extensions.settings.set('style', this.state.style);\r\n                window.tableau.extensions.settings.set('text', this.state.text);\r\n                window.tableau.extensions.settings.saveAsync().then(() => {\r\n                    this.configure();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let active = '';\r\n        let color = '';\r\n        const rgb = hexToRgb(this.state.button);\r\n        if (rgb) {\r\n            active = `rgb(${Math.floor(rgb.r)}, ${Math.floor(rgb.g)}, ${Math.floor(rgb.b)})`;\r\n            color = `rgba(${Math.floor(rgb.r)}, ${Math.floor(rgb.g)}, ${Math.floor(rgb.b)}, .8)`;\r\n        }\r\n        const css = `\r\n            button.button:active {\r\n                background-color: ${active} !important;\r\n            }\r\n        `\r\n\r\n        const textButton = <button className='button' onClick={this.applyFilters} style={{ backgroundColor: color, color: this.state.text }}>{this.state.label}</button>;\r\n\r\n        const imageButton = <img src={this.state.image.data !== '' ? `data:image/png;base64, ${this.state.image.data}` : `data:image/png;base64, ${defaultImage.data}`} style={{cursor: 'pointer', maxWidth: '100%', objectFit: 'contain'}} onClick={this.applyFilters} alt='Filter' />;\r\n\r\n        return (\r\n            <div className='outer' style={{ backgroundColor: this.state.bg }}>\r\n                <div className='inner'>\r\n                    <style>{css}</style>\r\n                    {this.state.style === \"image\" ? imageButton : textButton}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBookmarks;\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport FilterBookmarks from './FilterBookmarks';\r\nimport './style.css';\r\n\r\nReactDOM.render(<FilterBookmarks />, document.getElementById('container'));\r\n","export { }\n"],"sourceRoot":""}