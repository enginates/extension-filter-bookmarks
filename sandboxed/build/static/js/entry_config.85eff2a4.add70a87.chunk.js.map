{"version":3,"sources":["Configure.tsx","entry_config.tsx"],"names":["Configure","state","bg","button","clear","filters","image","name","ext","data","label","saved","style","text","useSelectedWS","selectWSList","worksheets","labelChange","e","target","value","setState","window","tableau","extensions","settings","set","saveAsync","error","console","log","styleChange","setImage","file","files","exec","slice","length","includes","type","reader","FileReader","addEventListener","result","substring","search","JSON","stringify","readAsDataURL","alert","bgChange","color","buttonChange","textChange","clearChange","checked","useSelectedWSChange","updateWSSelection","selection","innerText","inList","newList","filter","ws","push","getFilters","filterFetchPromises","dashboardfilters","dashboardContent","dashboard","forEach","worksheet","getFiltersAsync","Promise","all","then","fetchResults","filtersForWorksheet","constructSettings","submit","prunedList","undefined","find","w","ui","closeDialog","skip","min","minValue","max","maxValue","snullOption","formattedValue","fieldName","startsWith","dataType","filterType","nullOption","worksheetName","values","appliedValues","v","supdateType","isExcludeMode","updateType","f","this","constructRangeSetting","constructCategoricalSetting","setTimeout","initializeDialogAsync","getAll","parse","configured","className","xmlns","id","width","height","viewBox","x","y","fillRule","clipRule","fill","d","marginTop","kind","onChange","onSelect","display","accept","htmlFor","onClick","disabled","flexGrow","map","schema","selected","onMouseDown","children","key","title","marginBottom","whiteSpace","overflow","textOverflow","lineHeight","data-type","backgroundColor","marginLeft","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/entry_config.85eff2a4.add70a87.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button, Checkbox, TextField, DropdownSelect, Pill } from '@tableau/tableau-ui';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\ninterface Image {\r\n    name: string;\r\n    ext: string;\r\n    data: string;\r\n}\r\n\r\ninterface State {\r\n    bg: string,\r\n    button: string,\r\n    clear: boolean,\r\n    filters: any,\r\n    image: Image,\r\n    label: string,\r\n    saved: boolean,\r\n    style: string,\r\n    text: string,\r\n    useSelectedWS: boolean,\r\n    selectWSList: string[],\r\n    worksheets: any[]\r\n}\r\n\r\n// Container for all configurations\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        bg: '#000000',\r\n        button: '#000000',\r\n        clear: false,\r\n        filters: [],\r\n        image: { name: '', ext: '', data: '' },\r\n        label: 'Revert Filters',\r\n        saved: false,\r\n        style: 'text',\r\n        text: '#000000',\r\n        useSelectedWS: false,\r\n        selectWSList: [],\r\n        worksheets: []\r\n    };\r\n\r\n    // Handles change in label input\r\n    public labelChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const text: string = e.target.value;\r\n        this.setState({ label: text });\r\n        try {\r\n            window.tableau.extensions.settings.set('label', text);\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Handles change in style input\r\n    public styleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        const style: string = e.target.value;\r\n        this.setState({ style });\r\n        try {\r\n            window.tableau.extensions.settings.set('style', style);\r\n            window.tableau.extensions.settings.saveAsync();\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Display the selected image and save file data\r\n    public setImage = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        let file;\r\n        // Get the image from the file input\r\n        if (e.target.files) {\r\n            file = e.target.files[0];\r\n        }\r\n\r\n        if (file) {\r\n            // Regex to get file extension and name\r\n            const re = /(?:\\.([^.]+))?$/;\r\n            const ext = re.exec(file.name)![1];\r\n            const name = file.name.slice(0, -ext.length);\r\n\r\n            // Check if file is an image\r\n            const accepted = ['image/gif', 'image/jpeg', 'image/png'];\r\n            const valid = file && accepted.includes(file.type);\r\n            if (valid) {\r\n                // Create a new FileReader so we can read the contents of the image\r\n                const reader = new FileReader();\r\n\r\n                // Update the image data\r\n                reader.addEventListener('load', () => {\r\n                    if (reader.result) {\r\n                        const data = (reader.result as string).substring((reader.result as string).search(',') + 1);\r\n                        const image = {\r\n                            name,\r\n                            ext,\r\n                            data,\r\n                        };\r\n                        this.setState({ image });\r\n                        window.tableau.extensions.settings.set('image', JSON.stringify(image));\r\n                        window.tableau.extensions.settings.saveAsync();\r\n                    }\r\n                }, false);\r\n\r\n                // If an image was selected load the file into the FileReader\r\n                if (file) {\r\n                    reader.readAsDataURL(file);\r\n                }\r\n            } else {\r\n                alert('The selected file is not a .gif, .jpg, .jpeg, or .png');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handles change in color input\r\n    public bgChange = (color: any): void => {\r\n        this.setState({ bg: color.target.value });\r\n        window.tableau.extensions.settings.set('bg', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public buttonChange = (color: any): void => {\r\n        this.setState({ button: color.target.value });\r\n        window.tableau.extensions.settings.set('button', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in color input\r\n    public textChange = (color: any): void => {\r\n        this.setState({ text: color.target.value });\r\n        window.tableau.extensions.settings.set('text', color.target.value);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    }\r\n\r\n    // Handles change in ignoreSelection checkbox\r\n    public clearChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ clear: e.target.checked });\r\n        window.tableau.extensions.settings.set('clear', e.target.checked);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    };\r\n\r\n    // Handles change in select worksheets checkbox\r\n    public useSelectedWSChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ useSelectedWS: e.target.checked });\r\n        window.tableau.extensions.settings.set('useSelectedWS', e.target.checked);\r\n        window.tableau.extensions.settings.saveAsync();\r\n    };\r\n\r\n\r\n    // Handles change in selected worksheets list\r\n    public updateWSSelection = (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        const target = e.target as HTMLDivElement;\r\n        const selection = target.innerText;\r\n        const inList = this.state.selectWSList.includes(selection);\r\n        let newList = this.state.selectWSList\r\n        if (inList) {\r\n            newList = newList.filter(ws => ws !== selection);\r\n        } else {\r\n            newList.push(selection)\r\n        }\r\n        this.setState({ selectWSList: newList });\r\n        window.tableau.extensions.settings.set('selectWSList', JSON.stringify(newList));\r\n        window.tableau.extensions.settings.saveAsync();\r\n    };\r\n\r\n    // Get all filters from all worksheets in dashboard\r\n    public getFilters = (): void => {\r\n        console.log('getting filters')\r\n        const filterFetchPromises: any[] = [];\r\n        const dashboardfilters: any[] = [];\r\n        const dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            filterFetchPromises.push(worksheet.getFiltersAsync());\r\n        });\r\n        Promise.all(filterFetchPromises).then(fetchResults => {\r\n            fetchResults.forEach(filtersForWorksheet => {\r\n                filtersForWorksheet.forEach((filter: any) => {\r\n                    dashboardfilters.push(filter);\r\n                });\r\n            });\r\n            this.constructSettings(dashboardfilters);\r\n        });\r\n    }\r\n\r\n    // Settings for range filters\r\n    public constructRangeSetting(filter: any) {\r\n        let skip;\r\n        const min = filter.minValue.value;\r\n        const max = filter.maxValue.value;\r\n        const data = (typeof filter.maxValue.value === 'object' || typeof filter.minValue.value === 'object') ? 'date' : 'number';\r\n        const snullOption = (filter.maxValue.formattedValue === 'Null' && filter.minValue.formattedValue === 'Null') ? 'all-values' : '';\r\n        skip = (filter.minValue.value === undefined || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            dataType: data,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            max: (max === 0) ? .0000000000001 : max,\r\n            min: (min === 0) ? .0000000000001 : min,\r\n            nullOption: snullOption,\r\n            skip,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Settings for categoriacl filters\r\n    public constructCategoricalSetting(filter: any) {\r\n        let skip;\r\n        const values = [];\r\n        for (const v of filter.appliedValues) {\r\n            values.push(v.formattedValue)\r\n        }\r\n        const supdateType = (values.length === 0) ? 'all' : 'replace';\r\n        skip = (filter.fieldName === 'Measure Names' || filter.fieldName.startsWith('Action (')) ? true : false;\r\n        return {\r\n            appliedValues: values,\r\n            fieldName: filter.fieldName,\r\n            filterType: filter.filterType,\r\n            isExcludeMode: filter.isExcludeMode,\r\n            skip,\r\n            updateType: supdateType,\r\n            worksheetName: filter.worksheetName,\r\n        }\r\n    }\r\n\r\n    // Transforms filters into settings\r\n    public constructSettings(filters: any) {\r\n        const settings = [];\r\n        for (const f of filters) {\r\n            switch (f.filterType) {\r\n                case 'range':\r\n                    settings.push(this.constructRangeSetting(f));\r\n                    break;\r\n                case 'categorical':\r\n                    settings.push(this.constructCategoricalSetting(f));\r\n                    break;\r\n                default:\r\n                    continue;\r\n            }\r\n        }\r\n        window.tableau.extensions.settings.set('filters_set', 'true');\r\n        window.tableau.extensions.settings.set('filters', JSON.stringify(settings));\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            // Show/hide \"Settings saved!\"\r\n            this.setState({ saved: true });\r\n            setTimeout(() => {\r\n                this.setState({ saved: false });\r\n            }, 1000);\r\n        });\r\n    }\r\n\r\n    // Saves settings and closes configure dialog with data source payload\r\n    public submit = (): void => {\r\n        const worksheets = window.tableau.extensions.dashboardContent.dashboard.worksheets;\r\n        const prunedList = this.state.selectWSList.filter(ws => worksheets.find((w: any) => w.name === ws) !== undefined)\r\n        const text = (this.state.label || 'Revert Filters');\r\n        window.tableau.extensions.settings.set('label', text);\r\n        window.tableau.extensions.settings.set('style', this.state.style);\r\n        window.tableau.extensions.settings.set('image', JSON.stringify(this.state.image));\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.set('selectWSList', JSON.stringify(prunedList));\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog('closed');\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            let image = settings.image ? JSON.parse(settings.image) : this.state.image;\r\n            this.setState({\r\n                bg: settings.bg,\r\n                button: settings.button,\r\n                clear: settings.clear === 'true',\r\n                label: settings.label,\r\n                style: settings.style || 'text',\r\n                image,\r\n                text: settings.text,\r\n                useSelectedWS: settings.useSelectedWS === 'true',\r\n                selectWSList: (settings.selectWSList && JSON.parse(settings.selectWSList)) || [],\r\n                worksheets: window.tableau.extensions.dashboardContent.dashboard.worksheets\r\n            });\r\n            if (settings.configured !== 'true') {\r\n                this.getFilters();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Filter Bookmarks Configuration\r\n                            <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Set your dashboard filters they way you want to be able to revert to.</li>\r\n                                        <li>Open the configuration window and click \"Save Settings\".</li>\r\n                                    </ol>\r\n                                    <p>Optional: Customize your buttons label and colors.</p>\r\n                                    <p>If you simply want to clear all filters with this button, turn on that setting under \"Options\".</p>\r\n                                    <p>Note: You can add as many instances of this extension as you like!</p>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className='title' style={{ marginTop: '18px' }}>Button Settings</div>\r\n                            <div className='section'>\r\n                                <label className=\"label\">Button Style</label>\r\n                                <DropdownSelect className='dropdown-select' kind='line' onChange={this.styleChange} onSelect={this.styleChange} value={this.state.style}>\r\n                                    <option value=\"image\">Image button</option><option value=\"text\">Text button</option>\r\n                                </DropdownSelect>\r\n\r\n                                <TextField className='label-text-field' style={{ display: this.state.style === 'text' ? \"inline-flex\" : \"none\" }} kind='line' label='Label' onChange={this.labelChange} value={this.state.label} />\r\n\r\n                                <div className='inputBox' style={{ display: this.state.style === 'image' ? \"inline-flex\" : \"none\" }}>\r\n                                    <span className='imgName ellipsis'>{this.state.image.name !== '' ? this.state.image.name : 'Choose an image...'}</span>\r\n\r\n                                    <span className='imgExt'>{this.state.image.ext !== '' ? this.state.image.ext : ''}</span>\r\n\r\n                                    <input className='imgInput' type='file' accept='.gif,.jpg,.jpeg,.png' id='imgInput' onChange={this.setImage} />\r\n\r\n                                    <label className='imgLabel' htmlFor='imgInput'>Choose</label>\r\n                                </div>\r\n\r\n                                {this.state.clear ?\r\n                                    <p>Currently clearing all filters.</p> : <p>Click <b>Save Settings</b> to save current filters.</p>}\r\n\r\n                                <div className='set'>\r\n                                    <Button onClick={this.getFilters} disabled={this.state.clear}>Save Settings</Button>\r\n                                    <span className={this.state.saved ? 'saved show' : 'saved'}>Settings saved!</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className='title'>Options</div>\r\n                            <div className='section'>\r\n                                <Checkbox checked={this.state.clear} onChange={this.clearChange} style={{ flexGrow: 1 }}>Ignore settings and just clear all filters</Checkbox>\r\n                                <Checkbox checked={this.state.useSelectedWS} onChange={this.useSelectedWSChange} style={{ flexGrow: 1 }}>Only reset filters on selected worksheets.</Checkbox>\r\n\r\n\r\n                                <div className='listBox' style={{ display: this.state.useSelectedWS ? \"flex\" : \"none\" }}>\r\n                                    <div className='list scrolly'>\r\n                                        {this.state.worksheets.map((worksheet: any) =>\r\n                                            <Pill\r\n                                                kind='discrete'\r\n                                                schema={true}\r\n                                                selected={this.state.selectWSList.includes(worksheet.name)}\r\n                                                onMouseDown={this.updateWSSelection}\r\n                                                children={worksheet.name}\r\n                                                key={worksheet.name}\r\n                                                title={worksheet.name}\r\n                                                style={{ marginBottom: '4px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', display: 'block', lineHeight: '18px' }}\r\n                                                data-type={'worksheet'}\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className='title'>Formatting</div>\r\n                            <div className='section'>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Background Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Text Button Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.button} onChange={this.buttonChange} style={{ backgroundColor: this.state.button }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className='format'>\r\n                                    <div className='ftext'>Text Button Text Color</div>\r\n                                    <div>\r\n                                        <input type='color' value={this.state.text} onChange={this.textChange} style={{ backgroundColor: this.state.text }} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button kind='filledGreen' onClick={this.submit} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport Configure from './Configure';\r\nimport './style.css';\r\n\r\nReactDOM.render(<Configure />, document.getElementById('container'));\r\n"],"sourceRoot":""}